{
  "openapi": "3.0.0",
  "info": {
    "title": "Cinema Ticket Server API",
    "description": "This is a clone api of cinematicket.org. We tried to implement as many features as we can.",
    "contact": {
      "name": "Mahdi Hashemi",
      "url": "https://github.com/mahdiHash",
      "email": "mahdihashemi.code@gmail.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "localhost:12000/"
    }
  ],
  "paths": {
    "/getapikey": {
      "get": {
        "tags": [ "Api key" ],
        "security": [{}],
        "description": "Get an api key from the server. You need to provide this key in \"apikey\" header of your requests headers.",
        "summary": "Api key for other requests",
        "operationId": "apikey",
        "responses": {
          "200": {
            "description": "key generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "flkajfdldfasfd8af9d8f9adsfd9af9d89fa9dsf9daf89d"
              }
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [ "Auth" ],
        "security": [
          { "apikey": ["apikey"] }
        ],
        "description": "This route is used for user signup.",
        "summary": "User signup",
        "requestBody": {
          "description": "The \"tel\" field must contain 11 characters and the \"password\" field must contain at least 6 characters. \"password\" and \"repeatPass\" fields must be the same.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "tel": {
                    "type": "string",
                    "description": "This field must contain 11 characters.",
                    "example": "09120000000"
                  },
                  "password": {
                    "type": "string",
                    "description": "This field must contain at least 6 characters.",
                    "example": "someRand0mPa33"
                  },
                  "repeatPass": {
                    "type": "string",
                    "description": "This field must be the same as password field.",
                    "example": "someRand0mPa33"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response Set-Cookie header contains two fileds: authToken (server-usage) and userData object (you can store it).",
            "headers": {
              "Set-Cookie": {
                "$ref": "#/components/schemas/Set-Cookie"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The inputs are probably incorrect. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [ "Auth" ],
        "security": [
          { "apikey": [ "apikey" ]}
        ],
        "description": "This route is used for user login.",
        "summary": "User login",
        "requestBody": {
          "description": "The \"login\" field must be the user's tel or email and not be empty.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "login": {
                    "description": "This field must contain user's tel or email.",
                    "type": "string",
                    "example": "09120000000 | someEmail@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "someRand0mPa33"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response Set-Cookie header contains two fileds: authToken (server-usage) and userData object (you can store it).",
            "headers": {
              "Set-Cookie": {
                "$ref": "#/components/schemas/Set-Cookie"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The \"tel\" or \"password\" field is incorrect. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "400": {
            "description": "The inputs you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/user/profile": {
      "get": {
        "tags": [ "User" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Get user's information",
        "description": "Use this route for getting any information on user's profile.",
        "responses": {
          "200": {
            "description": "The values of these object properties depends on how complete the user's profile is. Apart from \"tel\" and \"id\" fields, the rest could be null.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "The id of user in database.",
                      "example": "123"
                    },
                    "first_name": {
                      "type": "string",
                      "description": "User's first name. Needed for submission actions like writing a comments.",
                      "example": "Jack"
                    },
                    "last_name": {
                      "type": "string",
                      "description": "User's last name. Needed for submission actions like writing a comments.",
                      "example": "Nicholson"
                    },
                    "tel": {
                      "type": "string",
                      "description": "User's phone number.",
                      "example": "09120000000"
                    },
                    "email": {
                      "type": "string",
                      "description": "User's email.",
                      "example": "jack@example.com"
                    },
                    "birthday": {
                      "type": "string",
                      "description": "This field is a Date(). It's converted to string by prisma so you may want to convert it back: new Date(birthday).",
                      "example": "Sat Feb 04 2023 23:12:12 GMT+0330"
                    },
                    "credit_card_num": {
                      "type": "string",
                      "description": "User's credit card number.",
                      "example": "1234123412341234"
                    },
                    "national_id": {
                      "type": "string",
                      "description": "User's national id.",
                      "example": "00000000000"
                    },
                    "profile_pic_url": {
                      "type": "string",
                      "description": "This is a relative path to the image web address. Use it like this: \"{api-url}/img/{profile_pic_url}\".",
                      "example": "/path/to/image"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The JWT you provided is not valid. No error message will be provided."
          }
        }
      }
    },
    "/user/update": {
      "put": {
        "tags": [ "User" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "description": "Use this route to update user's profile information. You only need to send the fields you want to update, the rest of the fileds won't be updated.",
        "summary": "Update user's profile info",
        "requestBody": {
          "description": "These are all the fields you can provide. There's no need to provide them all, just the ones you need to update. For the \"img\" field: the file has to be sent normally (not base64). File limitations: file size up to 2MB, supported formats are .jpg, .jpeg, .png, .webp.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string",
                    "example": "Jack"
                  },
                  "last_name": {
                    "type": "string",
                    "example": "Nicholson"
                  },
                  "tel": {
                    "type": "string",
                    "example": "09120000000",
                    "description": "If provided, it can't be empty and must contain 11 characters."
                  },
                  "email": {
                    "type": "string",
                    "example": "jack@example.com"
                  },
                  "birthday": {
                    "type": "string",
                    "example": "Sat Feb 04 2023 23:12:12 GMT+0330",
                    "description": "If provided, you should convert your Date to string."
                  },
                  "img": {
                    "type": "Image file",
                    "description": "The image file to upload. Pay attention to the description provided above in the request body."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response Set-Cookie header contains two fileds: authToken (server-usage) and userData object (you can store it). If the \"tel\" field was provided in the request body, you have to store the token, otherwise it's up to you (it's better you store it, since it's fresh and therefore the user has 90 days of logged in status).",
            "headers": {
              "Set-Cookie": {
                "$ref": "#/components/schemas/Set-Cookie"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The inputs you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. No error message will be provided."
          }
        }
      }
    },
    "/user/resetPass": {
      "put": {
        "tags": [ "User" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Reset user's password",
        "description": "Use this route to reset user's password. If the process is successful, an OK 200 response will be sent to you without any detail.",
        "requestBody": {
          "description": "\"newPass\" and \"repeatNewPass\" fields must be the same and contain at least 6 characters.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldPass": {
                    "type": "string",
                    "example": "someRand0mPa33"
                  },
                  "newPass": {
                    "type": "string",
                    "description": "At least 6 characters.",
                    "example": "newRand0mPa33"
                  },
                  "repeatNewPass": {
                    "type": "string",
                    "description": "The same as \"newPass\" field.",
                    "example": "newRand0mPa33"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The inputs you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. No error message will be provided."
          }
        }
      }
    },
    "/user/profilePic/remove": {
      "delete": {
        "tags": [ "User" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Remove user's profile pic",
        "description": "You only need to provide the JWT. If the operation is successful, you'll get just an OK 200 response without any info.",
        "responses": {
          "200": {
            "description": "The profile pic is successfully removed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User has not uploaded any profile pic. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. No error message will be provided."
          }
        }
      }
    },
    "/user/creditCard/submit": {
      "post": {
        "tags": [ "User" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Submit credit card authentication check",
        "description": "Using this route the user can request for a credit card authentication using a national ID.",
        "requestBody": {
          "description": "All fields are required.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "creditCard": {
                    "type": "string",
                    "example": "1234123412341234",
                    "description": "Must contain 16 characters."
                  },
                  "nationalId": {
                    "type": "string",
                    "example": "0123456789",
                    "description": "Must contain 10 characters."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The sumission is done.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The inputs you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The authToken cookie value is not valid. No error message will be provided."
          },
          "403": {
            "description": "The user has already submitted a request. Only one request can be submitted at a time."
          }
        }
      }
    },
    "/user/creditCard/cancel": {
      "delete": {
        "tags": [ "User" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Cancel a credit card authentication request",
        "description": "Only one request per user can be submitted. Use this route to remove the request to submit a new one.",
        "responses": {
          "200": {
            "description": "The request is removed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The authToken cookie is not valid. No more information will be provided."
          },
          "404": {
            "description": "The user hasn't submitted any request."
          }
        }
      }
    },
    "/user/creditCard/status": {
      "get": {
        "tags": [ "User" ],
        "security": [
          { "apieky": [] },
          { "authToken": [] }
        ],
        "summary": "Check credit card authentication request status",
        "description": "If the request is still on waiting status, the reponse will contain request info. If not, response will be null.",
        "responses": {
          "200": {
            "description": "If the request is not on waiting status, the reponse will be null.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "creditCardNum": {
                      "type": "string",
                      "example": "1234123412341234"
                    },
                    "nationalId": {
                      "type": "string",
                      "example": "0123456789"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "tags": [ "User" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "description": "Use this route to logout user. User must be logged-in.",
        "summary": "User logout",
        "responses": {
          "200": {
            "description": "If the logout is successful, the authToken and userData cookies will be removed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The JWT you provided is not valid. No error message will be provided."
          }
        }
      }
    },
    "/img/{imageUrl}": {
      "get": {
        "tags": [ "Media" ],
        "security": [
          { "apikey": [ "apikey" ]}
        ],
        "summary": "Get image",
        "description": "You need to provide the url into \"{baseUrl}/img\" to get the image. You can provide \"height\" and \"width\" query values to get the image at the size you want.",
        "parameters": [
          {
            "name": "imageUrl",
            "in": "path",
            "description": "This is the url to the image given to you by server.",
            "required": true,
            "example": "/user/imageName"
          },
          {
            "name": "height",
            "in": "query",
            "allowEmptyValue": true,
            "example": "300"
          },
          {
            "name": "width",
            "in": "query",
            "allowEmptyValue": true,
            "example": "300"
          }
        ],
        "responses": {
          "200": {
            "description": "Request is accepted."
          },
          "404": {
            "description": "Image not found."
          }
        }
      }
    },
    "/video/{videoUrl}": {
      "get": {
        "tags": [ "Media" ],
        "security": [
          { "apikey": [ "apikey" ]}
        ],
        "summary": "Get video",
        "description": "You need to provide the url into \"{baseUrl}/video\" to get the video.",
        "parameters": [
          {
            "name": "videoUrl",
            "in": "path",
            "description": "This is the url to the video given to you by server.",
            "required": true,
            "example": "/path/to/video"
          }
        ],
        "responses": {
          "200": {
            "description": "Request is accepted."
          },
          "404": {
            "description": "Videoa not found."
          }
        }
      }

    },
    "/admin/login": {
      "post": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [ "apikey" ]}
        ],
        "summary": "Admin login",
        "description": "Use this route for admins login. The response body will contain a \"token\" and a \"admin\" field (admin info). Store the token for further use.",
        "requestBody": {
          "description": "The tel field must contain 11 characters.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "tel": {
                    "type": "string",
                    "example": "09000000000"
                  },
                  "password": {
                    "type": "string",
                    "example": "someRand0mPa33"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response contains two fields: \"token\" and \"admin\". You may want to store the token for further actions.",
            "headers": {
              "Set-Cookie": {
                "$ref": "#/components/schemas/Set-Cookie-Admin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The \"tel\" or \"password\" field is incorrect. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "400": {
            "description": "The inputs you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/admin/profile/{admin_id}": {
      "get": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Get admin's profile",
        "description": "JWT must be provided. Normal admins can't get other admins profile info.",
        "parameters": [
          {
            "name": "admin_id",
            "in": "path",
            "example": 123,
            "description": "This parameter is optional: if it's present, that admin's profile info will be sent to the client, but if it's not, the current logged in admin's profile info will be sent."
          }
        ],
        "responses": {
          "200": {
            "description": "\"profile_pic_url\" will be null if the admin hasn't uploaded any image.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 123 
                    },
                    "access_level": {
                      "type": "string",
                      "description": "Possible values: super, play, comment"
                    },
                    "full_name": {
                      "type": "string",
                      "example": "محمد کمالی"
                    },
                    "tel": {
                      "type": "string",
                      "example": "09000000000"
                    },
                    "email": {
                      "type": "string",
                      "example": "myemail@example.com"
                    },
                    "national_id": {
                      "type": "string",
                      "example": "0123456789"
                    },
                    "home_tel": {
                      "type": "string",
                      "example": "01234567890"
                    },
                    "full_address": {
                      "type": "string",
                      "example": "ایران، تهران، میدان آزادی"
                    },
                    "profile_pic_url": {
                      "type": "string",
                      "description": "This is a relative path to the image web address. Use it like this: \"{api-url}/img/{profile_pic_url}\".",
                      "example": "/path/to/image"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/admin/profile/all": {
      "get": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Get all admins profiles",
        "description": "Normal admins can't get other admins profile info. This route is for super admins only.",
        "responses": {
          "200": {
            "description": "The response would be an array of admins profile info (the schema below is an example of an admin's profile). \"profile_pic_url\" will be null if the admin hasn't uploaded any image.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 123 
                    },
                    "access_level": {
                      "type": "string",
                      "description": "Possible values: super, play, comment"
                    },
                    "full_name": {
                      "type": "string",
                      "example": "محمد کمالی"
                    },
                    "tel": {
                      "type": "string",
                      "example": "09000000000"
                    },
                    "email": {
                      "type": "string",
                      "example": "myemail@example.com"
                    },
                    "national_id": {
                      "type": "string",
                      "example": "0123456789"
                    },
                    "home_tel": {
                      "type": "string",
                      "example": "01234567890"
                    },
                    "full_address": {
                      "type": "string",
                      "example": "ایران، تهران، میدان آزادی"
                    },
                    "profile_pic_url": {
                      "type": "string",
                      "description": "This is a relative path to the image web address. Use it like this: \"{api-url}/img/{profile_pic_url}\".",
                      "example": "/path/to/image"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/admin/create": {
      "post": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Create admin by super admin",
        "description": "Only the admins with \"super\" access level can send a request to this route.",
        "requestBody": {
          "description": "All the fields are needed. \"access_level\" can have one of \"play\", \"comment\" or \"review\" values.",
          "content": {
            "body": {
              "schema": {
                "properties": {
                  "access_level": {
                    "type": "string",
                    "description": "Allowed values: play, comment and review.",
                    "example": "play"
                  },
                  "full_name": {
                    "type": "string",
                    "example": "محمد کمالی"
                  },
                  "tel": {
                    "type": "string",
                    "description": "This field must contain 11 characters.",
                    "example": "09000000000"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password must contain at least 8 characters.",
                    "example": "someRand0mPa33"
                  },
                  "repeatPass": {
                    "type": "string",
                    "description": "This field must be the same as \"password\".",
                    "example": "someRand0mPa33"
                  },
                  "email": {
                    "type": "string",
                    "example": "myemail@example.com"
                  },
                  "national_id": {
                    "type": "string",
                    "description": "This field must contain 10 characters.",
                    "example": "0123456789"
                  },
                  "home_tel": {
                    "type": "string",
                    "description": "This field must contain 11 characters.",
                    "example": "01234567890"
                  },
                  "full_address": {
                    "type": "string",
                    "description": "This field must contain at least 10 characters.",
                    "example": "ایران، تهران، میدان آزادی"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "\"profile_pic_url\" will be null if the admin hasn't uploaded any image.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "admin": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 123 
                        },
                        "access_level": {
                          "type": "string",
                          "description": "Possible values: super, play, comment, review.",
                          "example": "play"
                        },
                        "full_name": {
                          "type": "string",
                          "example": "محمد کمالی"
                        },
                        "tel": {
                          "type": "string",
                          "example": "09000000000"
                        },
                        "email": {
                          "type": "string",
                          "example": "myemail@example.com"
                        },
                        "national_id": {
                          "type": "string",
                          "example": "0123456789"
                        },
                        "home_tel": {
                          "type": "string",
                          "example": "01234567890"
                        },
                        "full_address": {
                          "type": "string",
                          "example": "ایران، تهران، میدان آزادی"
                        },
                        "profile_pic_url": {
                          "type": "string",
                          "description": "This is a relative path to the image web address. Use it like this: \"{api-url}/img/{profile_pic_url}\".",
                          "example": "/path/to/image"
                        }
                      }
                    },
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The inputs you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/admin/update/{admin_id}": {
      "put": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Update an admin's info",
        "description": "Super admins can update normal admins info but not other super admins.",
        "parameters": [
          {
            "name": "admin_id",
            "in": "path",
            "example": 123,
            "description": "The admin_id of this route is optional: if it's present, that admin's profile info will be updated, but if it's not, the current logged in super admin's profile info will be updated. Super admins can update normal admins profie info."
          }
        ],
        "requestBody": {
          "description": "All the fields are needed. \"access_level\" can have one of \"play\", \"comment\" or \"review\" values. If the tel field is changed you need to store the authToken cookie.",
          "content": {
            "body": {
              "schema": {
                "properties": {
                  "access_level": {
                    "type": "string",
                    "description": "Allowed values: play, comment and review. In case of a super admin, this field will be ignored.",
                    "example": "play"
                  },
                  "full_name": {
                    "type": "string",
                    "example": "محمد کمالی"
                  },
                  "tel": {
                    "type": "string",
                    "description": "This field must contain 11 characters.",
                    "example": "09000000000"
                  },
                  "email": {
                    "type": "string",
                    "example": "myemail@example.com"
                  },
                  "national_id": {
                    "type": "string",
                    "description": "This field must contain 10 characters.",
                    "example": "0123456789"
                  },
                  "home_tel": {
                    "type": "string",
                    "description": "This field must contain 11 characters.",
                    "example": "01234567890"
                  },
                  "full_address": {
                    "type": "string",
                    "description": "This field must contain at least 10 characters.",
                    "example": "ایران، تهران، میدان آزادی"
                  },
                  "img": {
                    "type": "image file",
                    "description": "This field is optional. The file has to be sent normally (not base64). File limitations: file size up to 2MB, supported formats are .jpg, .jpeg, .png, .webp."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "headers": {
              "Set-Cookie": {
                "description": "If the current logged-in admin profile info is changed, the JWT is stored in \"authToken\" cookie(you need to provide it in routes that need it for authorization) and the admin's profile info is stored in \"adminData\" cookie.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "\"profile_pic_url\" of the adminData cookie will be null if the admin hasn't uploaded any image. If admin_id is not provided, the admin object of response will be omitted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "admin": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 123 
                        },
                        "access_level": {
                          "type": "string",
                          "description": "Possible values: super, play, comment, review",
                          "example": "play"
                        },
                        "full_name": {
                          "type": "string",
                          "example": "محمد کمالی"
                        },
                        "tel": {
                          "type": "string",
                          "example": "09000000000"
                        },
                        "email": {
                          "type": "string",
                          "example": "myemail@example.com"
                        },
                        "national_id": {
                          "type": "string",
                          "example": "0123456789"
                        },
                        "home_tel": {
                          "type": "string",
                          "example": "01234567890"
                        },
                        "full_address": {
                          "type": "string",
                          "example": "ایران، تهران، میدان آزادی"
                        },
                        "profile_pic_url": {
                          "type": "string",
                          "description": "This is a relative path to the image web address. Use it like this: \"{api-url}/img/{profile_pic_url}\".",
                          "example": "/path/to/image"
                        }
                      }
                    },
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "No admin with the given admin_id is found. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/admin/remove/{admin_id}": {
      "delete": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Remove a normal admin by super admin",
        "description": "Only super admins can use this route, and they can't remove other super admins. If the operation is successful, you'll get an OK 200 response.",
        "parameters": [
          {
            "name": "admin_id",
            "in": "path",
            "example": 123,
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The admin is successfully removed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "No admin with the given admin_id is found. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/admin/resetPass": {
      "put": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Reset admin password",
        "description": "If the process is successful, an OK 200 response will be sent to you with no additional information.",
        "requestBody": {
          "description": "\"newPass\" and \"repeatNewPass\" fields must be the same and contain at least 8 characters.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldPass": {
                    "type": "string",
                    "example": "someRand0mPa33"
                  },
                  "newPass": {
                    "type": "string",
                    "description": "At least 8 characters.",
                    "example": "newRand0mPa33"
                  },
                  "repeatNewPass": {
                    "type": "string",
                    "description": "The same as \"newPass\" field.",
                    "example": "newRand0mPa33"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The inputs you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/admin/profilePic/remove": {
      "delete": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Remove admin's profile pic",
        "description": "You only need to provide the JWT. If the operation is successful, you'll get just an OK 200 response without any info.",
        "responses": {
          "200": {
            "description": "The profile pic is successfully removed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User has not uploaded any profile pic. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/admin/userProfile/{user_id}/removeProfilePic": {
      "delete": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Remove a user's profile pic by super admin",
        "description": "Super admins can remove users profile pic using this route. If the process is successful, an OK 200 response will be given to the client.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "The profile pic is successfully removed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "No user with the given user_id is found. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/admin/userProfile/{user_id}/setDefaultFullName": {
      "put": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Set user's full name to a default value",
        "description": "This route can be used by super admins to set a default value (کاربر سینماتیکت) to a user's first and last name. If the process is successful, the default value will be given to the client.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "The full name is successfully set to default value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "first_name": {
                      "type": "string",
                      "example": "کاربر"
                    },
                    "last_name": {
                      "type": "string",
                      "example": "سینماتیکت"
                    },
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "No user with the given user_id is found. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }        
      }
    },
    "/admin/creditCard/reqs": {
      "get": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Get all credit card authentication requests",
        "description": "The pagination is done with cursor. Each request will have 15 records.",
        "parameters": [
          {
            "name": "cursor",
            "description": "This property is used for pagination. It should be the last id field of the last record you receive.",
            "in": "query",
            "schema": {
              "type": "number",
              "example": "123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Each request will contain 15 records containig an array of the object below.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "creditCard": {
                        "type": "string",
                        "example": "1234123412341234"
                      },
                      "nationalId": {
                        "type": "string",
                        "example": "0123456789"
                      },
                      "user": {
                        "type": "object",
                        "properties": {
                          "first_name": {
                            "type": "string",
                            "example": "حسین"
                          },
                          "last_name": {
                            "type": "string",
                            "example": "افتخاری"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The cursor you provided is not valid."
          },
          "401": {
            "description": "The authToken value is not valid. No more information will be sent on response."
          }
        }
      }
    },
    "/admin/creditCard/approve/{request_id}": {
      "put": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Approve credit card authentication request",
        "description": "Only admins with credit-card-level access can send a request to this route.",
        "parameters": [
          {
            "name": "request_id",
            "description": "The id of the request you want to approve.",
            "in": "path",
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "Operation is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request_id you provided is not valid."
          },
          "401": {
            "description": "You are not authorized to take is action. No more information will be provided to you."
          }
        }
      }
    },
    "/admin/creditCard/deny/{request_id}": {
      "delete": {
        "tags": [ "Admin" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Deny credit card authentication request",
        "description": "Only admins with credit_card access level can use this route.",
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "description": "The id of the request you want to deny.",
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "Operation is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request_id you provided is not valid."
          },
          "401": {
            "description": "You are not authorized to take is action. No more information will be provided to you."
          }
        }
      }
    },
    "/place/register": {
      "post": {
        "tags": [ "Place" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Register a new place by user",
        "description": "The users can register for their licensed cinema/theater using this route.",
        "requestBody": {
          "description": "All the fields must be provided.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the place to register."
                  },
                  "type": {
                    "type": "string",
                    "description": "Only two values are valid: cinema and theater"
                  },
                  "license_id": {
                    "type": "string",
                    "description": "The official license id of the place. It has to have 10 characters."
                  },
                  "address": {
                    "type": "string",
                    "description": "Full address of the place. Must contain at least 10 characters."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the process is successful, a code will be returned to the client inside the code property of response. This code has to be written down and can be used to track the process via \"/place/registerStat/{code}\" route.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "XF2US0AD"
                    },
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The inputs you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/place/register/status/{code}": {
      "get": {
        "tags": [ "Place" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Track the status of a place registeration",
        "description": "Only the creator of process or super admins can see the status.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "example": "XF2US0AD",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Whole registeration info will be given to you.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "سینما"
                    },
                    "type": {
                      "type": "string",
                      "example": "cinema"
                    },
                    "license_id": {
                      "type": "string",
                      "example": "0123456789"
                    },
                    "address": {
                      "type": "string",
                      "example": "ایران، تهران"
                    },
                    "status": {
                      "type": "string",
                      "description": "The values of this field can be one of the following: waiting, approved, denied.",
                      "example": "waiting"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The \"tel\" or \"password\" field is incorrect. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/place/register/cancel/{code}": {
      "delete": {
        "tags": [ "Place" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Cancel a pending place registeration",
        "description": "Only the owner of request can cancel a registeration process.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "example": "XF2US0AD",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "If the process is successful, an OK 200 response will be given to you. The registeration status can't be accessible after cancelation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "The code you provided is not found. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/place/register/all": {
      "get": {
        "tags": [ "Place" ],
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "summary": "Get all pending new place registerations",
        "description": "Only super admins can access this route.",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Results can be sorted by date from new to old (desc). The default order is from old to new (asc).",
            "example": "asc"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "This field is used for pagination. You need to provide the last id of the items you get for newer results, and the first id of the items you get for older results.",
            "example": 123
          },
          {
            "name": "backward",
            "in": "query",
            "description": "If you need to go to the previous page, set this field to \"true\".",
            "example": true
          },
          {
            "name": "license_id",
            "in": "query",
            "description": "You can set a value to this field to find a specific records. It must contain 10 characters.",
            "example": "0123456789"
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "description": "To get the records based on their status, you can set one of these values: \"waiting\", \"approved\" and \"denied\".",
            "example": "waiting"
          }
        ],
        "responses": {
          "200": {
            "description": "All the registerations info will be sent in an array of the scheme below (up to 10 records for each request). You can use \"haveMore\" field to know when there's no more data to retrieve.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "haveMore": {
                      "type": "boolean",
                      "description": "This field determines wether there's more records to get or not.",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 123
                          },
                          "name": {
                            "type": "string",
                            "example": "سینما"
                          },
                          "type": {
                            "type": "string",
                            "description": "This field can only have values of \"cinema\" or \"theater\".",
                            "example": "cinema"
                          },
                          "license_id": {
                            "type": "string",
                            "example": "0123456789"
                          },
                          "address": {
                            "type": "string",
                            "example": "ایران، تهران"
                          },
                          "status": {
                            "type": "string",
                            "description": "The values of this field can be one of the following: waiting, approved, denied.",
                            "example": "waiting"
                          },
                          "code": {
                            "type": "string",
                            "example": "XF2US0AD" 
                          },
                          "issue_date": {
                            "type": "string",
                            "description": "The date of registeration submission. You may put it inside \"new Date()\".",
                            "example": "2020-01-01T12:00:00.000Z"
                          },
                          "owner": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 123
                              },
                              "first_name": {
                                "type": "string",
                                "example": "فریبا"
                              },
                              "last_name": {
                                "type": "string",
                                "example": "نادری"
                              },
                              "tel": {
                                "type": "string",
                                "example": "09010000000"
                              },
                              "email": {
                                "type": "string",
                                "example": "f.mohseni@example.com"
                              },
                              "national_id": {
                                "type": "string",
                                "example": "0123456789"
                              },
                              "profile_pic_url": {
                                "type": "string",
                                "description": "This field is a relative path to the image.",
                                "example": "/path/to/image"
                              }
                            }
                          }
                        }  
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/place/register/approve/{register_id}": {
      "post": {
        "tags": [ "Place" ],
        "summary": "Approve a pending place register",
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "description": "Only super admins can access this route.",
        "parameters": [
          {
            "name": "register_id",
            "in": "path",
            "description": "The id of the place register record to approve.",
            "example": 123,
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The response would be an OK 200 if the process is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The register_id you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "No place registeration is found. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/place/register/deny/{register_id}": {
      "put": {
        "tags": [ "Place" ],
        "summary": "Deny a pending place register",
        "security": [
          { "apikey": [ "apieky" ]},
          { "authToken": [] }
        ],
        "description": "Only super admins can access this route.",
        "parameters": [
          {
            "name": "register_id",
            "in": "path",
            "description": "The id of the place register record to deny.",
            "example": 123,
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The response would be an OK 200 if the process is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The register_id you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "No place registeration is found. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/celebrity/create": {
      "post": {
        "tags": [ "Celebrity" ],
        "summary": "Create a celebrity profile",
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "description": "Only super/play admins can access this route.",
        "requestBody": {
          "description": "Only \"full_name\" and \"role\" fields are mandatory. \"role\" can have these values (multiple checkboxes, as an array): actor, actress, writer, presenter, director.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "full_name": {
                    "type": "string",
                    "description": "This field must contain at least 3 characters.",
                    "example": "کامران تفتی"
                  },
                  "role": {
                    "type": "array",
                    "description": "Valid values (multiple checkboxes, as an array): actor, actress, writer, presenter, director.",
                    "example": "[ \"actor\", \"director\" ]"
                  },
                  "birthday": {
                    "type": "string",
                    "description": "This field will be converted to a Date object.",
                    "example": "2000-07-01T15:30:10.000Z"
                  },
                  "birth_city": {
                    "type": "string",
                    "description": "If provided, it can't be empty.",
                    "example": "تهران"
                  },
                  "bio": {
                    "type": "string",
                      "description": "This the biography of the person you're adding. If provided, can't be empty."
                  },
                  "img": {
                    "type": "image file",
                    "description": "File limitations: file size up to 2MB, supported formats are .jpg, .jpeg, .png, .webp."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The process is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "celeb": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 123
                        },
                        "full_name": {
                          "type": "string",
                          "example": "کامران تفتی"
                        },
                        "role": {
                          "type": "array",
                          "description": "Could contain these values (as an array): actor, actress, writer, presenter, director.",
                          "example": "[ \"actor\", \"director\" ]"
                        },
                        "birthday": {
                          "type": "string",
                          "description": "You may convert this field to a new Date() object.",
                          "example": "2000-07-01T15:30:10.000Z"
                        },
                        "birth_city": {
                          "type": "string",
                          "description": "If provided, it can't be empty.",
                          "example": "تهران"
                        },
                        "bio": {
                          "type": "string"
                        },
                        "profile_pic_url": {
                          "type": "string",
                          "description": "If the upload is successful, the relative link to the image will be sent to you. You can use it as \"{baseURL}/img/{imageUrl}.",
                          "example": "path/to/image"
                        }
                      }
                    },
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The inputs you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. No error message will be provided."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/celebrity/all": {
      "get": {
        "tags": [ "Celebrity" ],
        "summary": "Get all the celebrities profiles",
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "description": "Only play/super admins can access this route.",
        "parameters": [
          {
            "name": "full_name",
            "in": "query",
            "description": "Provide this query field if you want to find a celebrity by full name.",
            "example": "کامران تفتی"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "This field is used for pagination. By each request, you'll be given 15 records. To go forward, you need to assign this field the last index of results you got. To go backward, you need to assign this field the first index of results you got.",
            "example": 123
          },
          {
            "name": "backward",
            "in": "query",
            "description": "To go backward, set this field to true",
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "The celebrities field will be provided with an array of the records with the same schema as the one below.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "haveMore": {
                      "type": "boolean",
                      "description": "This field determines if there's more data to retrieve."
                    },
                    "celebrities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 123
                          },
                          "full_name": {
                            "type": "string",
                            "example": "کامران تفتی"
                          },
                          "role": {
                            "type": "array",
                            "description": "Could contain these values (as an array): actor, actress, writer, presenter, director.",
                            "example": "[ \"actor\", \"director\" ]"
                          },
                          "birthday": {
                            "type": "string",
                            "description": "You may convert this field to a new Date() object.",
                            "example": "2000-07-01T15:30:10.000Z"
                          },
                          "birth_city": {
                            "type": "string",
                            "description": "If provided, it can't be empty.",
                            "example": "تهران"
                          },
                          "bio": {
                            "type": "string"
                          },
                          "profile_pic_url": {
                            "type": "string",
                            "description": "If the upload is successful, the relative link to the image will be sent to you. You can use it as \"{baseURL}/img/{imageUrl}.",
                            "example": "path/to/image"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The queries you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/celebrity/{celeb_id}": {
      "get": {
        "tags": [ "Celebrity" ],
        "summary": "Get a celebrity profile",
        "security": [
          { "apikey": [ "apikey" ]}
        ],
        "description": "This route is accessible by anyone.",
        "parameters": [
          {
            "name": "celeb_id",
            "in": "path",
            "description": "The id of celebrity you want to get",
            "example": 123,
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "\"profile_pic_url\" field could be null.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 123
                    },
                    "full_name": {
                      "type": "string",
                      "example": "کامران تفتی"
                    },
                    "role": {
                      "type": "array",
                      "description": "Could contain these values (as an array): actor, actress, writer, presenter, director.",
                      "example": "[ \"actor\", \"director\" ]"
                    },
                    "birthday": {
                      "type": "string",
                      "description": "You may convert this field to a new Date() object.",
                      "example": "2000-07-01T15:30:10.000Z"
                    },
                    "birth_city": {
                      "type": "string",
                      "description": "If provided, it can't be empty.",
                      "example": "تهران"
                    },
                    "bio": {
                      "type": "string"
                    },
                    "profile_pic_url": {
                      "type": "string",
                      "description": "If the upload is successful, the relative link to the image will be sent to you. You can use it as \"{baseURL}/img/{imageUrl}.",
                      "example": "path/to/image"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The celeb_id you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "No celebrity is found with the id you provided. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/celebrity/{celeb_id}/update": {
      "post": {
        "tags": [ "Celebrity" ],
        "summary": "Update a celebrity profile",
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "description": "Only super/play admins can access this route.",
        "parameters": [
          {
            "name": "celeb_id",
            "in": "path",
            "description": "The id of the celebrity to update profile of.",
            "example": 123,
            "required": true
          }
        ],
        "requestBody": {
          "description": "You can only provide the fields you want to update, the rest won't be changed. \"role\" can have these values (multiple checkboxes, as an array): actor, actress, writer, presenter, director.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "full_name": {
                    "type": "string",
                    "description": "This field must contain at least 3 characters.",
                    "example": "کامران تفتی"
                  },
                  "role": {
                    "type": "array",
                    "description": "Valid values (multiple checkboxes, as an array): actor, actress, writer, presenter, director.",
                    "example": "[ \"actor\", \"director\" ]"
                  },
                  "birthday": {
                    "type": "string",
                    "description": "This field will be converted to a Date object.",
                    "example": "2000-07-01T15:30:10.000Z"
                  },
                  "birth_city": {
                    "type": "string",
                    "description": "If provided, it can't be empty.",
                    "example": "تهران"
                  },
                  "bio": {
                    "type": "string",
                      "description": "This the biography of the person you're adding. If provided, can't be empty."
                  },
                  "img": {
                    "type": "image file",
                    "description": "File limitations: file size up to 2MB, supported formats are .jpg, .jpeg, .png, .webp."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The process is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "celeb": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 123
                        },
                        "full_name": {
                          "type": "string",
                          "example": "کامران تفتی"
                        },
                        "role": {
                          "type": "array",
                          "description": "Could contain these values (as an array): actor, actress, writer, presenter, director.",
                          "example": "[ \"actor\", \"director\" ]"
                        },
                        "birthday": {
                          "type": "string",
                          "description": "You may convert this field to a new Date() object.",
                          "example": "2000-07-01T15:30:10.000Z"
                        },
                        "birth_city": {
                          "type": "string",
                          "description": "If provided, it can't be empty.",
                          "example": "تهران"
                        },
                        "bio": {
                          "type": "string"
                        },
                        "profile_pic_url": {
                          "type": "string",
                          "description": "If the upload is successful, the relative link to the image will be sent to you. You can use it as \"{baseURL}/img/{imageUrl}.",
                          "example": "path/to/image"
                        }
                      }
                    },
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The inputs you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. No error message will be provided."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "No celebrity is found with this id. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/celebrity/{celeb_id}/profilePic/remove": {
      "delete": {
        "tags": [ "Celebrity" ],
        "summary": "Remove a celebrity profile pic",
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "description": "Only play/super admins can access this route.",
        "parameters": [
          {
            "name": "celeb_id",
            "in": "path",
            "description": "The id of the celebrity you want to remove the profile pic of.",
            "example": 123,
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "If the process is successful, an OK 200 response will be sent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The inputs you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. No error message will be provided."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "No celebrity is found with this id. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/celebrity/{celeb_id}/pics/upload": {
      "post": {
        "tags": [ "Celebrity" ],
        "summary": "Upload pics of a celebrity",
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "description": "Only play/super admins can access this route.",
        "parameters": [
          {
            "name": "celeb_id",
            "in": "path",
            "description": "The id of the celebrity you want to upload pics of.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "All photos must provide under the \"imgs\" field.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "imgs": {
                    "type": "array",
                    "description": "Array of images you want to uplaod. Each file limitations: file size up to 2MB, supported formats are .jpg, .jpeg, .png, .webp.",
                    "items": {
                      "type": "image file"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response would be an array of each image url inside the \"urls\" property.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "urls": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "path/to/image"
                      }
                    },
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The files you uploaded are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. No error message will be provided."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "No celebrity is found with this id. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/celebrity/{celeb_id}/pics": {
      "get": {
        "tags": [ "Celebrity" ],
        "summary": "Get all a celebrity pics",
        "security": [
          { "apikey": [ "apikey" ]}
        ],
        "description": "Anyone can access this route.",
        "parameters": [
          {
            "name": "celeb_id",
            "in": "path",
            "description": "The id of the celebrity you want to get the pics of.",
            "example": 123,
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The response would be an array of the object below. You can access them via this route: {base_url}/img/{image_url}.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "example": "path/to/image"
                      },
                      "width": {
                        "type": "number",
                        "example": 400
                      },
                      "height": {
                        "type": "number",
                        "example": 500
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The id you provided is not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/celebrity/{celeb_id}/pics/remove/{pic_url}": {
      "delete": {
        "tags": [ "Celebrity" ],
        "summary": "Delete a specific celebrity pic",
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "description": "Only play/super admins can access this route. If you want to delete all celebrity pics, place \"all\" in {pic_url}.",
        "parameters": [
          {
            "name": "celeb_id",
            "in": "path",
            "description": "The id of the celebrity you want to get the pics of.",
            "example": 123,
            "required": true
          },
          {
            "name": "pic_url",
            "in": "path",
            "description": "The url of the pic you want to delete. You can delete all celebrity pics by setting \"all\" to this parameter.",
            "example": "/path/to/image",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "If the process is successful, an OK 200 response will be sent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The celeb_id you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. No error message will be provided."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "No celebrity is found with this id. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/celebrity/{celeb_id}/remove": {
      "delete": {
        "tags": [ "Celebrity" ],
        "summary": "Remove a celebrity prfile",
        "security": [
          { "apikey": [ "apikey" ]},
          { "authToken": [] }
        ],
        "description": "Only play/super admins can access this route.",
        "parameters": [
          {
            "name": "celeb_id",
            "in": "path",
            "description": "The id of the celebrity you want to remove.",
            "example": 123,
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "If the process is successful, an OK 200 response will be sent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The celeb_id you provided are not valid. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "401": {
            "description": "The JWT you provided is not valid. No error message will be provided."
          },
          "403": {
            "description": "You are not authorized to access/take this resource/action. More information on the error will be sent to you on response. You can see the schema down this page."
          },
          "404": {
            "description": "No celebrity is found with this id. More information on the error will be sent to you on response. You can see the schema down this page."
          }
        }
      }
    },
    "/play/create": {
      "post": {
        "tags": [ "Play" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Create a new play",
        "description": "Using this route, an admin with \"play\" access level can create new plays. For celebrities field you should only provide celebrities ids. You can search among celebrities with \"/celebrity/all\" route (search for the name of the celebrity). The order of the items is important.",
        "requestBody": {
          "description": "The required fields are marked with * in schema section of request body.",
          "content": {
            "body": {
              "schema": {
                "required": [
                  "title",
                  "director",
                  "producer",
                  "duration",
                  "genre",
                  "type",
                  "intro",
                  "celebrities"
                ],
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "بارکد"
                  },
                  "director": {
                    "type": "string",
                    "example": "مصطفی کیایی"
                  },
                  "producer": {
                    "type": "string",
                    "example": "مصطفی کیایی"
                  },
                  "duration": {
                    "type": "number",
                    "example": 103
                  },
                  "genre": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "drama",
                        "romantic",
                        "action",
                        "horror",
                        "sci_fi",
                        "adventure",
                        "mystery",
                        "comedy",
                        "historical",
                        "biography",
                        "social",
                        "animation",
                        "kids",
                        "documentary"
                      ],
                      "example": "action"
                    }
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "movie",
                      "show"
                    ],
                    "example": "movie"
                    
                  },
                  "intro": {
                    "type": "string",
                    "example": "پشت هر آدمی یه داستانی هست و پشت هر داستانی یه آدم، بهتره قبل از هر قضاوتی یکم صبر داشته باشیم."
                  },
                  "publish_date": {
                    "type": "string",
                    "description": "A valid Date object converted to string.",
                    "example": "2016-01-11T00:00:00.000Z"
                  },
                  "celebrities": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "description": "The id of celebrities starring in this play.",
                      "example": 123
                    }
                  },
                  "img": {
                    "type": "Image File",
                    "description": "The image you want to upload for the play cover."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The play is created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    },
                    "play": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string",
                          "example": "بارکد"
                        },
                        "director": {
                          "type": "string",
                          "example": "مصطفی کیایی"
                        },
                        "producer": {
                          "type": "string",
                          "example": "مصطفی کیایی"
                        },
                        "duration": {
                          "type": "number",
                          "example": 120
                        },
                        "genre": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "drama",
                              "romantic",
                              "action",
                              "horror",
                              "sci_fi",
                              "adventure",
                              "mystery",
                              "comedy",
                              "historical",
                              "biography",
                              "social",
                              "animation",
                              "kids",
                              "documentary"
                            ],
                            "example": "action"
                          }
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "movie",
                            "show"
                          ],
                          "example": "movie"
                          
                        },
                        "intro": {
                          "type": "string",
                          "example": "پشت هر آدمی یه داستانی هست و پشت هر داستانی یه آدم، بهتره قبل از هر قضاوتی یکم صبر داشته باشیم."
                        },
                        "publish_date": {
                          "type": "string",
                          "description": "A valid Date object converted to string.",
                          "example": "2016-01-11T00:00:00.000Z"
                        },
                        "cover_url": {
                          "type": "string",
                          "description": "This is a relative path to the image web address. Use it like this: \"{api-url}/img/{cover_url}\".",
                          "example": "/path/to/image"
                        },
                        "trailer_url": {
                          "type": "string",
                          "description": "This is a relative path to the video web address. Use it like this: \"{api-url}/video/{trailer_url}\".",
                          "example": "/path/to/video"
                        },
                        "isFeatured": {
                          "type": "boolean",
                          "example": false
                        },
                        "celebrities": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 123
                              },
                              "full_name": {
                                "type": "string",
                                "example": "کامران تفتی"
                              },
                              "role": {
                                "type": "array",
                                "description": "Could contain these values (as an array): actor, actress, writer, presenter, director.",
                                "example": "[ \"actor\", \"director\" ]"
                              },
                              "birthday": {
                                "type": "string",
                                "description": "You may convert this field to a new Date() object.",
                                "example": "2000-07-01T15:30:10.000Z"
                              },
                              "birth_city": {
                                "type": "string",
                                "description": "If provided, it can't be empty.",
                                "example": "تهران"
                              },
                              "bio": {
                                "type": "string"
                              },
                              "profile_pic_url": {
                                "type": "string",
                                "description": "If the upload is successful, the relative link to the image will be sent to you. You can use it as \"{baseURL}/img/{imageUrl}.",
                                "example": "path/to/image"
                              }
                            }  
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Your request doesn't have the required conditions of request body."
          },
          "401": {
            "description": "The authToken you provided is not valid. No more information will be sent on response."
          }
        }
      }
    },
    "/play/{play_id}": {
      "get": {
        "tags": [ "Play" ],
        "parameters": [
          {
            "name": "play_id",
            "in": "path",
            "required": true,
            "description": "The id of the play you want to update",
            "example": 123
          }
        ],
        "description": "Everyone can access this route.",
        "responses": {
          "200": {
            "description": "The pics field is an array of play pics uploaded. The \"position\" field of each pic record could be one of: <br>1) celebNoBackground: a celebrity pic for featured plays (in main page slider, on left side of each play). <br>2) topPlayBackground: top play is the play above of each category title of the main page. <br>3) featuredBackground: background of the plays in the main page slider. <br>4) background: the top background image of each play. <br>5) morePics: pics of the play in its own page. <br>Use these to place the pics in the right place.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "play": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string",
                          "example": "بارکد"
                        },
                        "director": {
                          "type": "string",
                          "example": "مصطفی کیایی"
                        },
                        "producer": {
                          "type": "string",
                          "example": "مصطفی کیایی"
                        },
                        "duration": {
                          "type": "number",
                          "example": 120
                        },
                        "genre": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "drama",
                              "romantic",
                              "action",
                              "horror",
                              "sci_fi",
                              "adventure",
                              "mystery",
                              "comedy",
                              "historical",
                              "biography",
                              "social",
                              "animation",
                              "kids",
                              "documentary"
                            ],
                            "example": "action"
                          }
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "movie",
                            "show"
                          ],
                          "example": "movie" 
                        },
                        "intro": {
                          "type": "string",
                          "example": "پشت هر آدمی یه داستانی هست و پشت هر داستانی یه آدم، بهتره قبل از هر قضاوتی یکم صبر داشته باشیم."
                        },
                        "publish_date": {
                          "type": "string",
                          "description": "A valid Date object converted to string.",
                          "example": "2016-01-11T00:00:00.000Z"
                        },
                        "cover_url": {
                          "type": "string",
                          "description": "This is a relative path to the image web address. Use it like this: \"{api-url}/img/{cover_url}\".",
                          "example": "/path/to/image"
                        },
                        "trailer_url": {
                          "type": "string",
                          "description": "This is a relative path to the video web address. Use it like this: \"{api-url}/video/{trailer_url}\".",
                          "example": "/path/to/video"
                        },
                        "isFeatured": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    },
                    "pics": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "The url to the image. You need to send a request to \"/img/{img_url}\" to get the pic.",
                            "example": "/path/to/image"
                          },
                          "width": {
                            "type": "number",
                            "example": 400
                          },
                          "height": {
                            "type": "number",
                            "example": 500
                          },
                          "alt": {
                            "type": "string",
                            "description": "The alt text of the pic.",
                            "example": "title of the play"
                          },
                          "position": {
                            "type": "string",
                            "description": "The position of the pic.",
                            "example": "background"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/play/{play_id}/update": {
      "put": {
        "tags": [ "Play" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Update a play's info",
        "description": "Only admins with play access level can access this route.",
        "parameters": [
          {
            "name": "play_id",
            "in": "path",
            "required": true,
            "description": "The id of the play you want to update",
            "example": 123
          }
        ],
        "requestBody": {
          "description": "All the fields are optional. You can provide only the ones you want to update.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "بارکد"
                  },
                  "director": {
                    "type": "string",
                    "example": "مصطفی کیایی"
                  },
                  "producer": {
                    "type": "string",
                    "example": "مصطفی کیایی"
                  },
                  "duration": {
                    "type": "number",
                    "example": 103
                  },
                  "genre": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "drama",
                        "romantic",
                        "action",
                        "horror",
                        "sci_fi",
                        "adventure",
                        "mystery",
                        "comedy",
                        "historical",
                        "biography",
                        "social",
                        "animation",
                        "kids",
                        "documentary"
                      ],
                      "example": "action"
                    }
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "movie",
                      "show"
                    ],
                    "example": "movie"
                  },
                  "intro": {
                    "type": "string",
                    "example": "پشت هر آدمی یه داستانی هست و پشت هر داستانی یه آدم، بهتره قبل از هر قضاوتی یکم صبر داشته باشیم."
                  },
                  "publish_date": {
                    "type": "string",
                    "description": "A valid Date object converted to string.",
                    "example": "2016-01-11T00:00:00.000Z"
                  },
                  "img": {
                    "type": "Image File",
                    "description": "The image you want to upload for the play cover."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The play is created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    },
                    "play": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string",
                          "example": "بارکد"
                        },
                        "director": {
                          "type": "string",
                          "example": "مصطفی کیایی"
                        },
                        "producer": {
                          "type": "string",
                          "example": "مصطفی کیایی"
                        },
                        "duration": {
                          "type": "number",
                          "example": 120
                        },
                        "genre": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "drama",
                              "romantic",
                              "action",
                              "horror",
                              "sci_fi",
                              "adventure",
                              "mystery",
                              "comedy",
                              "historical",
                              "biography",
                              "social",
                              "animation",
                              "kids",
                              "documentary"
                            ],
                            "example": "action"
                          }
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "movie",
                            "show"
                          ],
                          "example": "movie"
                          
                        },
                        "intro": {
                          "type": "string",
                          "example": "پشت هر آدمی یه داستانی هست و پشت هر داستانی یه آدم، بهتره قبل از هر قضاوتی یکم صبر داشته باشیم."
                        },
                        "publish_date": {
                          "type": "string",
                          "description": "A valid Date object converted to string.",
                          "example": "2016-01-11T00:00:00.000Z"
                        },
                        "cover_url": {
                          "type": "string",
                          "description": "This is a relative path to the image web address. Use it like this: \"{api-url}/img/{cover_url}\".",
                          "example": "/path/to/image"
                        },
                        "trailer_url": {
                          "type": "string",
                          "description": "This is a relative path to the video web address. Use it like this: \"{api-url}/video/{trailer_url}\".",
                          "example": "/path/to/video"
                        },
                        "isFeatured": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Your request doesn't have the required conditions of request body."
          },
          "401": {
            "description": "The authToken you provided is not valid. No more information will be sent on response."
          }
        }
      }
    },
    "/play/{play_id}/coverPic/remove": {
      "delete": {
        "tags": [ "Play" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Remove a play's cover image",
        "description": "Only admins with play access level can access this route.",
        "parameters": [
          {
            "name": "play_id",
            "in": "path",
            "required": true,
            "description": "The id of the play you want to update",
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "Operation is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The play_id you provided is not valid."
          },
          "401": {
            "description": "The authToken you provided is not valid."
          },
          "404": {
            "description": "No play was found with this play_id."
          }
        }
      }
    },
    "/play/{play_id/pics/upload": {
      "post": {
        "tags": [ "Play" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Upload play pics",
        "parameters": [
          {
            "name": "play_id",
            "in": "path",
            "required": true,
            "description": "The id of the play you want to update",
            "example": 123
          }
        ],
        "description": "Using this route, only play admins can upload pics for plays. Each pic has a predefined position that you can know more about in the request body description.",
        "requestBody": {
          "description": "Positions for each pic: <br>1) celebNoBackground: a celebrity pic for featured plays (in main page slider, on left side of each play). <br>2) topPlayBackground: top play is the play above of each category title of the main page. <br>3) featuredBackground: background of the plays in the main page slider. <br>4) background: the top background image of each play. <br>5) morePics: pics of the play in its own page.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "imgs": {
                    "type": "array",
                    "description": "The images you want to upload. Each file limitations: file size up to 2MB, supported formats are .jpg, .jpeg, .png, .webp.",
                    "items": {
                      "type": "Image File"
                    }
                  },
                  "position": {
                    "type": "string",
                    "example": "background"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The pic is uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    },
                    "urls": {
                      "type": "array",
                      "description": "The url of the images you uploaded in an array.",
                      "items": {
                        "type": "string",
                        "example": "/path/to/image"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Position field or the image condition is not valid."
          },
          "401": {
            "description": "The authToken is not valid. No more information will be sent on response."
          },
          "403": {
            "description": "You are not authorized to access/take this route/action."
          }
        }
      }
    },
    "/play/{play_id}/pics/remove/all": {
      "delete": {
        "tags": [ "Play" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Remove all play pics",
        "description": "Only play admins can access this route.",
        "parameters": [
          {
            "name": "play_id",
            "in": "path",
            "required": true,
            "description": "The id of the play you want to update",
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "All pics are removed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "play_id is not a valid number."
          },
          "401": {
            "description": "The authToken is not valid. No more information will be sent on response."
          },
          "403": {
            "description": "You are not authorized to access/take this route/action."
          }
        }
      }
    },
    "/play/{play_id}/pics/remove/{img_url}": {
      "delete": {
        "tags": [ "Play" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Remove a specific play pic",
        "parameters": [
          {
            "name": "play_id",
            "in": "path",
            "required": true,
            "description": "The id of the play you want to update",
            "example": 123
          },
          {
            "name": "img_url",
            "in": "path",
            "required": true,
            "description": "The url to the image you want to remove.",
            "example": "/path/to/image"
          } 
        ],
        "description": "Only play admins can access this route.",
        "responses": {
          "200": {
            "description": "The image is removed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "play_id is not a valid number."
          },
          "401": {
            "description": "The authToken is not valid. No more information will be sent on response."
          },
          "403": {
            "description": "You are not authorized to access/take this route/action."
          }
        }
      }
    },
    "/play/{play_id}/trailer/upload": {
      "post": {
        "tags": [ "Play" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Upload a trailer video for a play",
        "parameters": [
          {
            "name": "play_id",
            "in": "path",
            "required": true,
            "description": "The id of the play you want to update",
            "example": 123
          }
        ],
        "description": "Only play admins can access this route.",
        "requestBody": {
          "description": "File limitations: max file size is 25MB, supported formats are .mp4, .webm.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "vid": {
                    "type": "Video File"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The video is successfully uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    },
                    "url": {
                      "type": "string",
                      "description": "The path to trailer.",
                      "example": "/path/to/trailer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Video is not valid."
          },
          "401": {
            "description": "The authToken is not valid. No more information will be sent on response."
          },
          "403": {
            "description": "You are not authorized to access/take this route/action."
          }
        }
      }
    },
    "/play/{play_id}/trailer/remove": {
      "delete": {
        "tags": [ "Play" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Remove a play trailer",
        "parameters": [
          {
            "name": "play_id",
            "in": "path",
            "required": true,
            "description": "The id of the play you want to update",
            "example": 123
          }
        ],
        "description": "Only play admins can access this route.",
        "responses": {
          "200": {
            "description": "The trailer is removed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "play_id is not valid."
          },
          "401": {
            "description": "The authToken is not valid. No more information will be sent on response."
          },
          "403": {
            "description": "You are not authorized to access/take this route/action."
          }
        }
      }
    },
    "/play/{play_id}/review/write": {
      "post": {
        "tags": [ "Play" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "summary": "Write a review for a play",
        "parameters": [
          {
            "name": "play_id",
            "in": "path",
            "required": true,
            "description": "The id of the play you want to update",
            "example": 123
          }
        ],
        "description": "Only admins with review access level can access this route. Only one review can be submitted for a play.",
        "requestBody": {
          "description": "For uploading images in the review, send POST requests to \"/play/{play_id}/review/pics/upload\". The content of review must have at least 100 characters.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The review is submitted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    },
                    "review": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "description": "The id of the submitted review.",
                          "example": 123
                        },
                        "text": {
                          "type": "string",
                          "description": "The content of the review."
                        },
                        "writer": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "example": 123 
                            },
                            "full_name": {
                              "type": "string",
                              "example": "محمد کمالی"
                            },
                            "profile_pic_url": {
                              "type": "string",
                              "description": "This is a relative path to the image web address. Use it like this: \"{api-url}/img/{profile_pic_url}\".",
                              "example": "/path/to/image"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "play_id is not valid, the content contains less than 100 characters or there's already a review for this play."
          },
          "401": {
            "description": "The authToken is not valid. No more information will be sent on response."
          },
          "403": {
            "description": "You are not authorized to access/take this route/action."
          }

        }
      }
    },
    "/play/{play_id}/review/update": {
      "put": {
        "tags": [ "Play" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "parameters": [
          {
            "name": "play_id",
            "in": "path",
            "required": true,
            "description": "The id of the play you want to update",
            "example": 123
          }
        ],
        "summary": "Update a review of a play",
        "description": "Only admins with review access level can access this route.",
        "requestBody": {
          "description": "For uploading images in the review, send POST requests to \"/play/{play_id}/review/pics/upload\". The content of review must have at least 100 characters.",
          "content": {
            "body": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The review is submitted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    },
                    "review": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "description": "The id of the submitted review.",
                          "example": 123
                        },
                        "text": {
                          "type": "string",
                          "description": "The content of the review."
                        },
                        "writer": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "example": 123 
                            },
                            "full_name": {
                              "type": "string",
                              "example": "محمد کمالی"
                            },
                            "profile_pic_url": {
                              "type": "string",
                              "description": "This is a relative path to the image web address. Use it like this: \"{api-url}/img/{profile_pic_url}\".",
                              "example": "/path/to/image"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The play_id is not valid or the content contains less than 100 characters."
          },
          "401": {
            "description": "The authToken is not valid. No more information will be sent on response."
          },
          "403": {
            "description": "You are not authorized to access/take this route/action."
          }

        }
      }
    },
    "/play/{play_id}/review/publish": {
      "put": {
        "tags": [ "Play" ],
        "security": [
          { "apikey": [] },
          { "authToken": [] }
        ],
        "parameters": [
          {
            "name": "play_id",
            "in": "path",
            "required": true,
            "description": "The id of the play you want to update",
            "example": 123
          }
        ],
        "description": "Only play admins can access this route.",
        "responses": {
          "200": {
            "description": "The review is now published.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "play_id is not valid."
          },
          "401": {
            "description": "The authToken is not valid. No more information will be sent on response."
          },
          "403": {
            "description": "You are not authorized to access/take this route/action."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "properties": {
                "name": { "type": "string" },
                "message": { "type": "string" }
              }
            }
          },
          "headers": { "type": "object" },
          "body": { "type": "object" },
          "parameters": { "type": "object" }
        }
      },
      "Set-Cookie": {
        "description": "The JWT is stored in \"authToken\" cookie(you need to provide it in routes that need it for authorization). The user's profile info is stored in \"userData\" cookie.",
        "schema": {
          "type": "string"
        }
      },
      "Set-Cookie-Admin": {
        "description": "The JWT is stored in \"authToken\" cookie(you need to provide it in routes that need it for authorization). The admin's profile info is stored in \"adminData\" cookie.",
        "schema": {
          "type": "string"
        }
      },
      "message": {
        "type": "string",
        "description": "A message to show to the user when the request is successful."
      }
    },
    "securitySchemes": {
      "apikey": {
        "description": "The value of your api key must go inside a header named \"apikey\" on all request except for \"/getapikey\" route.",
        "name": "apikey",
        "type": "apiKey",
        "in": "header"
      },
      "authToken": {
        "type": "apiKey",
        "in": "cookie",
        "name": "authToken",
        "description": "This field must be provided in cookies for authorization of the protected routes."
      }
    }
  },
  "security": [
    {
      "apikey": [ "apikey" ]
    },
    {
      "authToken": [] 
    }
  ]
}
